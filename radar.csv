name,ring,quadrant,isNew,description
Jacoco,adopt,tools,FALSE,JaCoCo is a free Java code coverage library distributed under the Eclipse Public License
SoapUI,assess,tools,FALSE,"<p>SoapUI is an open-source web service testing application for service-oriented architectures (SOA) and representational state transfers (REST). Its functionality covers web service inspection, invoking, development, simulation and mocking, functional testing, load and compliance testing</p>"
LocalStack,trial,tools,FALSE,"<p>One of the challenges of using cloud services is being able to develop and test locally. <strong><a href=""https://github.com/localstack/localstack"">LocalStack</a></strong> solves this problem for <a href=""/radar/platforms/aws"">AWS</a> by providing local <a href=""https://martinfowler.com/bliki/TestDouble.html"">test double</a> implementations of a wide range of AWS services, including S3, Kinesis, DynamoDB and Lambda. It builds on top of best-of-breed tools such as <a href=""https://github.com/mhart/kinesalite"">Kinesalite</a>, <a href=""https://github.com/mhart/dynalite"">dynalite</a> and <a href=""https://github.com/spulec/moto"">Moto</a> and adds isolated processes and error injection functionality. LocalStack is very easy to use, ships with a simple JUnit runner and a JUnit 5 extension and can also run inside a docker container. For many teams, it has become the default for testing services that are deployed on AWS.</p>"
JMeter,adopt,tools,FALSE,"<p>The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. Apache JMeter may be used to test performance both on static and dynamic resources, Web dynamic applications. It can be used to simulate a heavy load on a server, group of servers, network or object to test its strength or to analyze overall performance under different load types</p>"
Terraform,hold,tools,FALSE,"<p><strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, is rapidly becoming a de facto choice for creating and managing cloud infrastructures by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. The active community will add support for the latest features from most cloud providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product with a good ecosystem that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""https://aws.amazon.com/s3/"">AWS S3</a> for that purpose.</p>"
Git,adopt,tools,FALSE,"<p>Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows</p>"
Postman,assess,tools,FALSE,"<p>Postman is an API(application programming interface) development tool which helps to build, test and modify APIs. It has the ability to make various types of HTTP requests(GET, POST, PUT, PATCH), saving environments for later use, converting the API to code for various languages(like JavaScript, Python). </p>"
Npm,adopt,tools,FALSE,"<p>npm (originally short for Node Package Manager) is a package manager for the JavaScript programming language. It is the default package manager for the JavaScript runtime environment Node.js. It consists of a command line client, also called npm, and an online database of public and paid-for private packages, called the npm registry. The registry is accessed via the client, and the available packages can be browsed and searched via the npm website</p>"
Gradle,adopt,tools,FALSE,<p>Gradle is an open-source build-automation system that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven for declaring the project configuration</p>
Chaos Toolkit,trial,tools,FALSE,<p> In progress... </p>
Serenity,adopt,tools,FALSE,<p> In progress... </p>
Protractor,assess,tools,FALSE,"<p>Protractor is an end-to-end test framework for Angular and AngularJS applications. Protractor runs tests against your application running in a real browser, interacting with it as a user would</p>"
Selenium,adopt,tools,FALSE,<p> In progress... </p>
AVA,trial,language-and-frameworks,FALSE,"<p><strong><a href=""https://github.com/avajs/ava"">AVA</a></strong> is a test runner for Node.js. Even though JavaScript is single-threaded, IO in Node.js can happen in parallel because of its asynchronous nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO-heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. AVA is a lightweight option, when compared to full-featured frameworks such as <a href=""/radar/languages-and-frameworks/jest"">Jest</a>. It is opinionated and forces you to write atomic test cases.</p>"
jest,trial,language-and-frameworks,FALSE,<p> In progress... </p>
Helm,trial,tools,FALSE,"<p><a href=""http://helm.sh""><strong>Helm</strong></a> is a package manager for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. It comes with a repository of curated Kubernetes applications that are maintained in the official <a href=""https://github.com/helm/charts"">Charts repository</a>. Helm has two components: a command line utility called Helm and a cluster component called Tiller. Securing a Kubernetes cluster is a wide and nuanced topic, but we highly recommend setting up Tiller in a role-based access control (RBAC) environment. We've used Helm in a number of client projects and its dependency management, templating and hook mechanism has greatly simplified the application lifecycle management in Kubernetes. However, we recommend proceeding with caution — Helm's <a href=""/radar/techniques/templating-in-yaml"">YAML templating</a> can be difficult to understand, and Tiller still has some rough edges. Helm 3 is expected to address these issues.</p>"
CloudFormation,adopt,platforms,FALSE,"<p><a href=""https://aws.amazon.com/cloudformation/"">AWS CloudFormation</a> provides a common language for you to describe and provision all the infrastructure resources in your cloud environment. CloudFormation allows you to use programming languages or a simple text file to model and provision, in an automated and secure manner, all the resources needed for your applications across all regions and accounts. This gives you a single source of truth for your AWS resources </p>"
CDK,trial,language-and-frameworks,FALSE,<p> In progress... </p>
NodeJs,trial,language-and-frameworks,FALSE,"<p><strong>Node.js</strong> is an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser<p>"
TypeScript/Javascript,adopt,language-and-frameworks,FALSE,"<p><strong><a href=""https://www.typescriptlang.org/"">TypeScript</a></strong>, a statically typed language and superset of JavaScript, has become our sensible default. Large-scale projects benefit most from the type safety. Our developers favor its minimal configuration management, well-integrated IDE support and its ability to refactor code safely and gradually adopt types. With its <a href=""https://definitelytyped.org/"">good repository</a> of TypeScript-type definitions at hand, we benefit from all the rich JavaScript libraries while gaining type safety.</p>"
ReactJS,trial,language-and-frameworks,FALSE,<p> In progress... </p>
RxJS,adopt,language-and-frameworks,FALSE,<p> In progress... </p>
RPG,assess,language-and-frameworks,FALSE,<p> In progress... </p>
Cobol,hold,language-and-frameworks,FALSE,
Xamarin,trial,platforms,FALSE,"<p>Xamarin extends the .NET platform with tools and libraries specifically for building apps on iOS, Android, macOS, and more/p>"
Flutter,trial,platforms,FALSE,<p> In progress... </p>
AngularJs,hold,language-and-frameworks,FALSE,<p> In progress... </p>
Angular,adopt,language-and-frameworks,FALSE,<p> In progress... </p>
Java,adopt,language-and-frameworks,FALSE,"<p><strong>Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA),[15] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation</p><strong>"
Python,trial,language-and-frameworks,FALSE,"<p>Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects</p>"
Mockito,adopt,language-and-frameworks,FALSE,<p>Mockito is a mocking framework for java. It lets you write tests with a clean and simple API. Mockito doesn’t give you hangover because the tests are very readable and they produce clean verification errors</p>
PowerMock,assess,language-and-frameworks,FALSE,"<p>PowerMock is a framework that extends other mock libraries such as EasyMock with more powerful capabilities. PowerMock uses a custom classloader and bytecode manipulation to enable mocking of static methods, constructors, final classes and methods, private methods, removal of static initializers and more<p>"
Elixir - Erlang/OTP,trial,language-and-frameworks,FALSE,<p> In progress... </p>
Mocha,adopt,language-and-frameworks,FALSE,"<p>Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases</p>"
Chai,adopt,language-and-frameworks,FALSE,<p>Chai is a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework</p>
SuperTest,assess,language-and-frameworks,FALSE,"<p>Super-agent driven library for testing node.js HTTP servers using a fluent API</p>
"
Sinon,assess,language-and-frameworks,FALSE,"<p>Standalone test spies, stubs and mocks for JavaScript. Works with any unit testing framework</p>"
Karma,adopt,language-and-frameworks,FALSE,"<p>The main goal for Karma is to bring a productive testing environment to developers. The environment being one where they don't have to set up loads of configurations, but rather a place where developers can just write the code and get instant feedback from their tests</p>"
Jasmine,adopt,language-and-frameworks,FALSE,"<p>Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests</p>"
Spring Framework,adopt,language-and-frameworks,FALSE,"<p>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform.</p>"
Hibernate,assess,language-and-frameworks,FALSE,"<p>Hibernate ORM (Hibernate in short) is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. Hibernate handles object-relational impedance mismatch problems by replacing direct, persistent database accesses with high-level object handling functions.</p>"
Spark Framework,trial,language-and-frameworks,FALSE,"<p>Spark Framework is a simple and expressive Java/Kotlin web framework DSL built for rapid development. Sparks intention is to provide an alternative for Kotlin/Java developers that want to develop their web applications as expressive as possible and with minimal boilerplate. With a clear philosophy Spark is designed not only to make you more productive, but also to make your code better under the influence of Spark’s sleek, declarative and expressive syntax.</p>"
Reactor,trial,language-and-frameworks,FALSE,"Alongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. JavaScript enables interactive web pages and is an essential part of web applications."
Resilience4j,trial,language-and-frameworks,FALSE,"<p><a href=""https://github.com/resilience4j/resilience4j""><strong>Resilience4j</strong></a> is a lightweight fault tolerance library inspired by Netflix <a href=""/radar/tools/hystrix"">Hystrix</a>. We like its lightweight and modular structure where we pull in specific modules for specific capabilities such as circuit-breaking, rate-limiting, retry, and bulkhead. While <a href=""/radar/techniques/service-mesh"">service meshes</a> are taking on some of the fault tolerance capabilities, fault tolerance libraries continue to remain a key component of our systems for more nuanced domain-specific fault tolerance behavior and for non-containerized services. With Hystrix going into <a href=""https://github.com/Netflix/Hystrix/commit/a7df971cbaddd8c5e976b3cc5f14013fe6ad00e6#diff-04c6e90faac2675aa89e2176d2eec7d8"">maintenance mode</a>, Resilience4j becomes a default choice in the Java ecosystem. It can work with synchronous APIs as well as reactive ones. It also surfaces metrics to <a href=""https://metrics.dropwizard.io/4.0.0/"">dropwizard metrics</a>, <a href=""/radar/tools/prometheus"">Prometheus</a> and others using additional modules.</p>"
WebFlux,trial,language-and-frameworks,FALSE,"<p><strong><a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"">WebFlux</a></strong> is the Spring Framework implementation of <a href=""https://www.reactive-streams.org/"">Reactive Streams</a>. We see a rise in reactive programming models across our teams in general and the use of WebFlux in teams who are working in the Spring ecosystem. It's best used in large microservices ecosystems where the high performance of the requests is a major concern. It allows overlapping request processing asynchronously without the complications of using multiple threads. WebFlux uses <a href=""https://github.com/reactor/reactor"">Reactor</a> as its reactive library but it is interoperable with other reactive libraries via Reactive Streams. It uses <a href=""https://netty.io/"">Netty</a> as its underlying high-performance communications engine. Although we encourage using Reactive Streams, adopting this programming model requires a significant shift in thinking.</p>"
React Native,hold,platforms,FALSE,<p> In progress... </p>
RDS - Postgres,assess,platforms,FALSE,"<p>Amazon RDS is a distributed relational database service by Amazon Web Services (AWS). It is a web service running ""in the cloud"" designed to simplify the setup, operation, and scaling of a relational database for use in applications. Administration processes like patching the database software, backing up databases and enabling point-in-time recovery are managed automatically. Scaling storage and compute resources can be performed by a single API call as AWS does not offer an ssh connection to RDS instances</p>"
Aurora,assess,platforms,FALSE,
Mongo,trial,platforms,FALSE,
Datical,assess,platforms,FALSE,
Starc,assess,platforms,FALSE,<p> In progress... </p>
DynamoDB,assess,platforms,FALSE,"<p>Amazon DynamoDB is a fully managed proprietary NoSQL database service that supports key-value and document data structures and is offered by Amazon.com as part of the Amazon Web Services portfolio. DynamoDB exposes a similar data model to and derives its name from Dynamo, but has a different underlying implementation. Dynamo had a multi-master design requiring the client to resolve version conflicts and DynamoDB uses synchronous replication across multiple data centers for high durability and availability. </p>"
ElastiCache,assess,platforms,FALSE,"<p>Amazon ElastiCache offers fully managed Redis and Memcached. Seamlessly deploy, run, and scale popular open source compatible in-memory data stores. Build data-intensive apps or improve the performance of your existing apps by retrieving data from high throughput and low latency in-memory data stores</p>"
Secrets Manager AWS,adopt,platforms,FALSE,"<p>AWS Secrets Manager helps you protect secrets needed to access your applications, services, and IT resources. The service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Users and applications retrieve secrets with a call to Secrets Manager APIs, eliminating the need to hardcode sensitive information in plain text. </p>"
ELB - ALB,adopt,platforms,FALSE,<p>Elastic Load Balancing (ELB) is a load-balancing service for Amazon Web Services (AWS) deployments. ELB automatically distributes incoming application traffic and scales resources to meet traffic demands</p>
EKS,adopt,platforms,FALSE,"<p>Amazon Elastic Kubernetes Service (Amazon EKS) makes it easy to deploy, manage, and scale containerized applications using Kubernetes on AWS. Amazon EKS runs the Kubernetes management infrastructure for you across multiple AWS availability zones to eliminate a single point of failure</p>"
S3,adopt,platforms,FALSE,"<p>Amazon S3 or Amazon Simple Storage Service is a service offered by Amazon Web Services (AWS) that provides object storage through a web service interface. Amazon S3 uses the same scalable storage infrastructure that Amazon.com uses to run its global e-commerce network. Amazon S3 can be employed to store any type of object which allows for uses like storage for Internet applications, backup and recovery, disaster recovery, data archives, data lakes for analytics, and hybrid cloud storage  In its service-level agreement</p>"
CloudFront,adopt,platforms,FALSE,"<p>Amazon CloudFront is a content delivery network (CDN) offered by Amazon Web Services. Content delivery networks provide a globally-distributed network of proxy servers which cache content, such as web videos or other bulky media, more locally to consumers, thus improving access speed for downloading the content</p>"
API Connect,adopt,platforms,FALSE,"<p>IBM API Management(with version 5 renamed to IBM API Connect) is an API Management platform for use in the API Economy. IBM API Connect enables users to create, assemble, manage, secure and socialize web application programming interfaces (APIs).It provides a developer portal for application developers and to view published APIs. An administration portal allows users to establish policies for APIs such as self-registration, quotas, key management and security policies. An analytics engine provides role-based analytics for API owners, solution administrators and application developers in order to manage APIs and ensure service levels are being achieved</p>"
AADP,adopt,platforms,FALSE,"<p>Microsoft Azure Active Directory is a comprehensive identity and access management cloud solution that combines core directory services, application access management, and advanced identity protection</p>"
Docker,adopt,platforms,FALSE,"<p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.</p>"
Azure DevOps,adopt,platforms,FALSE,<p> Azure DevOps is the evolution of VSTS (Visual Studio Team Services). It is the result of years of using their own tools and developing a process for building and delivering products in an efficient and effective way. </p>
Dynatrace,adopt,platforms,FALSE,"<p>Dynatrace is a software intelligence company providing application performance management (APM), artificial intelligence for operations (AIOps), cloud infrastructure monitoring, and digital experience management (DEM), with products for the information technology departments and digital business owners of medium and large businesses</p>"
Istio,trial,platforms,FALSE,"<p><strong><a href=""https://istio.io/"">Istio</a></strong> is becoming the de facto infrastructure to operationalize a <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> ecosystem. Its out-of-the-box implementation of cross-cutting concerns — such as service discovery, service-to-service and origin-to-service security, observability (including telemetry and distributed tracing), rolling releases and resiliency — has been bootstrapping our microservices implementations very quickly. It's the main implementation of the <a href=""/radar/techniques/service-mesh"">service mesh</a> technique we've been using. We've been enjoying its monthly releases and its continuous improvements with seamless upgrades. We use Istio to bootstrap our projects, starting with observability (tracing and telemetry) and service-to-service security. We're closely watching its improvements to service-to-service authentication everywhere in and outside of the mesh. We'd also like to see Istio establish best practices for configuration files to strike a balance between giving autonomy to service developers and control to the service mesh operators.</p>"
Kobiton,assess,platforms,FALSE,<p> In progress... </p>
Artifactory,adopt,platforms,FALSE,<p> In progress... </p>
Sonar,adopt,platforms,FALSE,<p> In progress... </p>
Kiuwan,adopt,platforms,FALSE,<p> In progress... </p>
OpenShift,trial,platforms,FALSE,<p> In progress... </p>
CodeDeploy,trial,platforms,FALSE,<p> In progress... </p>
HokeyApp,assess,platforms,FALSE,<p> In progress... </p>
Github,assess,platforms,FALSE,<p> In progress... </p>
Lambda,trial,platforms,FALSE,<p> In progress... </p>
Rational Team Concert,adopt,platforms,FALSE,<p> In progress... </p>
Feature Flags,assess,platforms,FALSE,<p> In progress... </p>
UrbanCode,assess,platforms,FALSE,<p> In progress... </p>
Fluid Asserts,assess,platforms,FALSE,<p> In progress... </p>
Kafka Streams,trial,platforms,FALSE,"<p><strong><a href=""https://kafka.apache.org/documentation/streams/"">Kafka Streams</a></strong> is a lightweight library to build streaming applications. It supports basic streaming APIs such as join, filter, map and aggregate as well as local storage for common use cases such as windowing and sessions. Unlike other stream-processing platforms such as <a href=""/radar/platforms/apache-spark"">Apache Spark</a> and <a href=""https://doc.akka.io/docs/akka-stream-kafka/current/home.html"">Alpakka Kafka</a>, Kafka Streams has been a good fit for scenarios that don't require large-scale distribution and parallel processing; hence we could get away without yet another piece of infrastructure such as cluster schedulers. Naturally, Kafka Streams has been a good choice when operating in the Kafka ecosystem. Kafka Streams is particularly useful when we have to process data strictly in order and exactly once. One particular use case of Kafka Streams is to build a <a href=""https://en.wikipedia.org/wiki/Change_data_capture#Event_Programming"">change data capture (CDC)</a> platform.</p>"
Micro frontends,trial,techniques,FALSE,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a frontend monolith — a large, entangled browser application that sits on top of the backend services — largely neutralizing the benefits of microservices. Since we first described <strong>micro frontends</strong> as a technique to address this issue, we've had almost universally positive experiences with the approach and have found a number of patterns to use micro frontends even as more and more code shifts from the server to the web browser. So far, <a href=""/radar/platforms/web-components-standard"">web components</a> have been elusive in this field, though.</p>"
Secrets as a service,adopt,techniques,FALSE,"<p>Humans and machines use secrets throughout the value stream of building and operating software. The build pipelines need secrets to interface with secure infrastructures such as container registries, the applications use API keys as secrets to get access to business capabilities, and the service-to-service communications are secured using certificates and keys as secrets. You can set and retrieve these secrets in different ways. We've long cautioned developers about using source code management for storing secrets. We've recommended <a href=""/radar/techniques/decoupling-secret-management-from-source-code"">decoupling secret management from source code</a> and using tools such as <a href=""/radar/tools/git-secrets"">git-secrets</a> and <a href=""/radar/tools/talisman"">Talisman</a> to avoid storing secrets in the source code. We've been using <strong>secrets as a service</strong> as a default technique for storing and accessing secrets. With this technique you can use tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a> or <a href=""https://aws.amazon.com/kms/"">AWS Key Management Service (KMS)</a> to read/write secrets over an HTTPS endpoint with fine-grained levels of access control. Secrets as a service uses external identity providers such as <a href=""https://aws.amazon.com/iam/"">AWS IAM</a> to identify the actors who request access to secrets. Actors authenticate themselves with the secrets service. For this process to work, it's important to automate bootstrapping the identity of the actors, services and applications. Platforms based on <a href=""/radar/platforms/spiffe"">SPIFFE</a> have improved the automation of assigning identities to services.</p>"
Chaos Engineering,trial,techniques,FALSE,"<p>In the last year we've seen <strong>Chaos Engineering</strong> move from a much talked-about idea to an accepted, mainstream approach to improving and assuring distributed system resilience. As organizations large and small begin to implement Chaos Engineering as an operational process, we're learning how to apply these techniques safely at scale. The approach is definitely not for everyone, and to be effective and safe, it requires organizational support at scale. Industry acceptance and available expertise will definitely increase with the appearance of commercial services such as <a href=""/radar/tools/gremlin"">Gremlin</a> and deployment tools such as <a href=""/radar/tools/spinnaker"">Spinnaker</a> implementing some Chaos Engineering tools.</p>"
Container security scanning,assess,techniques,FALSE,"<p>The container revolution around <a href=""/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments, fueling increased adoption of continuous delivery and continuous deployments. The latter, especially, has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Tools in the build pipeline automatically check containers flowing through the pipeline against known vulnerabilities. Since our first mention of this technique, the tool landscape has matured and the technique has proven useful on development efforts with our clients.</p>"
Service mesh,trial,techniques,FALSE,"<p><strong>Service mesh</strong> is an approach to operating a secure, fast and reliable microservices ecosystem. It has been an important stepping stone in making it easier to adopt microservices at scale. It offers discovery, security, tracing, monitoring and failure handling. It provides these cross-functional capabilities without the need for a shared asset such as an API gateway or baking libraries into each service. A typical implementation involves lightweight reverse-proxy processes, aka sidecars, deployed alongside each service process in a separate container. Sidecars intercept the inbound and outbound traffic of each service and provide cross-functional capabilities mentioned above. This approach has relieved the distributed service teams from building and updating the capabilities that the mesh offers as code in their services. This has lead to an even easier adoption of <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a> in a microservices ecosystem. Our teams have been successfully using this approach with open source projects such as <a href=""/radar/platforms/istio"">Istio</a> and we will continue to monitor other open service mesh implementations such as <a href=""http://linkerd.io/"">Linkerd</a> closely.</p>"
Templating in YAML,hold,techniques,FALSE,"<p>As infrastructures grow in complexity, so do the configuration files that define them. Tools such as <a href=""https://aws.amazon.com/cloudformation/"">AWS CloudFormation</a>, <a href=""/radar/platforms/kubernetes"">Kubernetes</a> and <a href=""/radar/tools/helm"">Helm</a> expect configuration files in JSON or YAML syntax, presumably in an attempt to make them easy to write and process. However, in most cases, teams quickly reach the point where they have some parts that are similar but not quite the same, for example, when the same service must be deployed in different regions with a slightly different setup. For such cases tools offer <strong>templating in YAML</strong> (or JSON), which has caused a huge amount of <a href=""https://leebriggs.co.uk/blog/2019/02/07/why-are-we-templating-yaml.html"">frustration with practitioners</a>. The problem is that the syntax of JSON and YAML requires all sorts of awkward compromises to graft templating features such as conditionals and loops into the files. We recommend using an API from a programming language instead or, when this is not an option, a templating system in a programming language, either a general-purpose language such as Python or something specialized such as <a href=""https://jsonnet.org/"">Jsonnet</a>.</p>"
OAuth,assess,techniques,FALSE,<p> In progress... </p>
"Verificación continua de vulnerabilidades (Sonar, etc..)​",adopt,techniques,FALSE,<p> In progress... </p>
"Tecnicas de seguridad por protocolo (Http: Headers de Seguridad, etc..)​",trial,techniques,FALSE,<p> In progress... </p>
Uso adecuado de algoritmos y protocolos de cifrado​,trial,techniques,FALSE,<p> In progress... </p>
Consideraciones de seguridad en aplicaciones cloud native​,trial,techniques,FALSE,<p> In progress... </p>
Strong eventual consistency (ACID 2.0)​,trial,techniques,FALSE,<p> In progress... </p>
CQRS,trial,techniques,FALSE,<p> In progress... </p>
Conflic free replicated data types (CRDTs)​,trial,techniques,FALSE,<p> In progress... </p>
coherencia y uso efectivo de caches​,trial,techniques,FALSE,<p> In progress... </p>
Garantía de Consistencia en transacciones y procesos distribuidos​,trial,techniques,FALSE,<p> In progress... </p>
Transacciones de compensación --> Saga pattern ​,trial,techniques,FALSE,<p> In progress... </p>
Immutable data / Append-Only Apps​,trial,techniques,FALSE,<p> In progress... </p>
Limitaciones y características de distintos modelos de datos distribuidos SQL/NoSQL​,assess,techniques,FALSE,<p> In progress... </p>
Retry and idempotence,adopt,techniques,FALSE,<p> In progress... </p>
Location Transparency​,trial,techniques,FALSE,<p> In progress... </p>
Fault tolerance and recovery patterns​,trial,techniques,FALSE,<p> In progress... </p>
Supervisión externa a nivel de proceso (Health check/K8s) *probe ​,adopt,techniques,FALSE,<p> In progress... </p>
Self Healing deployments (Container orchestation)​,adopt,techniques,FALSE,<p> In progress... </p>
Concurrency safe code​,adopt,techniques,FALSE,<p> In progress... </p>
Fault isolation / Isolate all the things --> Bulkheading.,trial,techniques,FALSE,<p> In progress... </p>
Traceable and observable systems / logs management (Back/front) (Observabilidad/auditoría),trial,techniques,FALSE,<p> In progress... </p>
Fallback strategy and Circuit breakers​,trial,techniques,FALSE,<p> In progress... </p>
Replication and redundance,trial,techniques,FALSE,<p> In progress... </p>
Uso de Flujos asíncronos y no bloqueantes,trial,techniques,FALSE,<p> In progress... </p>
Event Sourcing​,trial,techniques,FALSE,<p> In progress... </p>
Event first Domain driven design​,trial,techniques,FALSE,<p> In progress... </p>
"Event Streaming Platforms (Event streams) / ""data at rest"" to ""data in motion.""​",trial,techniques,FALSE,<p> In progress... </p>
Event driven architecture (Commands and Events)​,trial,techniques,FALSE,<p> In progress... </p>
Fuctional reactive programming​,trial,techniques,FALSE,<p> In progress... </p>
"Message Retry strategies: Dead letters, queue backlogs.., manual message retry​",trial,techniques,FALSE,<p> In progress... </p>
Elastic (Auto scale out/down) deployments –> Container Orchestation​,adopt,techniques,FALSE,<p> In progress... </p>
Modelos de concurrencia optimizados para asíncronismo y alta concurrencia​,trial,techniques,FALSE,<p> In progress... </p>
Reactive programming​,trial,techniques,FALSE,<p> In progress... </p>
"Protocolos de comunicación modernos (gRPC, Rsocket, etc..)​",trial,techniques,FALSE,<p> In progress... </p>
Database connection pool sizing,trial,techniques,FALSE,<p> In progress... </p>
End to end reactive/non-blocking flow​,trial,techniques,FALSE,<p> In progress... </p>
Enfoque declarativo y funcional,trial,techniques,FALSE,<p> In progress... </p>
Estructura centrada en el dominio​,adopt,techniques,FALSE,<p> In progress... </p>
Diseño de APIs / Contratos definidos,trial,techniques,FALSE,<p> In progress... </p>
Manejar patrones y abstraciones funcionales (Para sistemas reactivos y No Reactivos)​,trial,techniques,FALSE,<p> In progress... </p>
Patrones y abstraciones para el reuso (Refactor)​,trial,techniques,FALSE,<p> In progress... </p>
Listado de code smells (clean code and Refactoring),adopt,techniques,FALSE,<p> In progress... </p>
Tamaño maximo de clases y funciones​,adopt,techniques,FALSE,<p> In progress... </p>
Rapid proyect onboarding / Boilerplate / reference project structures / generators ​,trial,techniques,FALSE,<p> In progress... </p>
Complejidad ciclomática máxima ​,adopt,techniques,FALSE,<p> In progress... </p>
Principios SOLID / Inversion de dependencias / inyección de dependencias​,adopt,techniques,FALSE,<p> In progress... </p>
Constant code reviews​,adopt,techniques,FALSE,<p> In progress... </p>
Test driven development​,adopt,techniques,FALSE,<p> In progress... </p>
Architectural fitness function as continous validation tool​,trial,techniques,FALSE,<p> In progress... </p>
Bounded context as microservices,assess,techniques,FALSE,<p> In progress... </p>
Domain contexts instead of Layered Silos​,trial,techniques,FALSE,<p> In progress... </p>
Orientación a mensajes vs Orientación a servicios síncronos,trial,techniques,FALSE,<p> In progress... </p>
Mapeo del Diseño estratégico DDD desde la arquitectura empresarial (Context Map),assess,techniques,FALSE,<p> In progress... </p>
Licence compliance​,adopt,techniques,FALSE,<p> In progress... </p>
Criterios de evaluacion para el uso​ de Open Source,adopt,techniques,FALSE,<p> In progress... </p>
Gobierno de la contribuión adecuada​,trial,techniques,FALSE,<p> In progress... </p>